# install.packages("devtools")
devtools::install_github("karbartolome/shinymatic")
# install.packages("devtools")
devtools::install_github("karbartolome/shinymatic")
library(shiny)
library(shinymatic)
df <- data.frame(
var_num_1 = c(1,2,3),
var_num_2 = c(6,5,4),
var_cat_1 = factor(c('a','b','c'))
)
Titanic
data.frame(Titanic)
df <- data.frame(Titanic)
str(df)
ui <- shiny::fluidPage(
autoinput_numerical(.df=df),
textOutput(outputId = 'num_values'),
br(),
autoinput_categorical(.df=df),
textOutput(outputId = 'cat_values'),
)
server <- function(input, output) {
output$num_values <- reactive({
vars_num <- names(df)[sapply(df, is.numeric)]
paste0(sapply(vars_num,
FUN=function(i) paste(i,"=", input[[i]])),
collapse = ', ')
})
output$cat_values <- reactive({
vars_cat <- names(df)[sapply(df, is.factor)]
paste0(sapply(vars_cat,
FUN=function(i) paste(i,"=", input[[i]])),
collapse = ', ')
})
}
shiny::shinyApp(ui = ui, server = server)
ui <- shiny::fluidPage(
autoinput_numerical(.df=df),
textOutput(outputId = 'num_values'),
br(),
#autoinput_categorical(.df=df),
textOutput(outputId = 'cat_values'),
)
server <- function(input, output) {
output$num_values <- reactive({
vars_num <- names(df)[sapply(df, is.numeric)]
paste0(sapply(vars_num,
FUN=function(i) paste(i,"=", input[[i]])),
collapse = ', ')
})
# output$cat_values <- reactive({
#   vars_cat <- names(df)[sapply(df, is.factor)]
#   paste0(sapply(vars_cat,
#                 FUN=function(i) paste(i,"=", input[[i]])),
#          collapse = ', ')
# })
}
shiny::shinyApp(ui = ui, server = server)
ui <- shiny::fluidPage(
autoinput_numerical(.df=df),
textOutput(outputId = 'num_values'),
br(),
#autoinput_categorical(.df=df),
textOutput(outputId = 'cat_values'),
)
print(vars_num)
#' server <- function(input, output) {
#'   output$values <- reactive({
#'     vars_num <- names(df)[sapply(df, is.numeric)]
#'     paste0(sapply(vars_num,
#'                   FUN=function(i) paste(i,"=", input[[i]])),
#'            collapse = ', ')
#'   })
#' }
#'
#' shiny::shinyApp(ui = ui, server = server)
autoinput_numerical <- function(.df) {
vars_num <- names(.df)[sapply(.df, is.numeric)]
print(vars_num)
shiny::tagList(shiny::fluidRow(
shiny::column(
width = 12,
lapply(
X = 1:length(vars_num),
FUN = function(var) {
shiny::sliderInput(
inputId = vars_num[var],
label = vars_num[var],
min = min(.df[, var]),
max = max(.df[, var]),
step = 1,
value = .df[1, var]
)
}
)
)))
}
autoinput_numerical(.df=df)
df$Freq %>% min()
min(df$Freq)
#' server <- function(input, output) {
#'   output$values <- reactive({
#'     vars_num <- names(df)[sapply(df, is.numeric)]
#'     paste0(sapply(vars_num,
#'                   FUN=function(i) paste(i,"=", input[[i]])),
#'            collapse = ', ')
#'   })
#' }
#'
#' shiny::shinyApp(ui = ui, server = server)
autoinput_numerical <- function(.df) {
vars_num <- names(.df)[sapply(.df, is.numeric)]
print(vars_num)
shiny::tagList(shiny::fluidRow(
shiny::column(
width = 12,
lapply(
X = 1:length(vars_num),
FUN = function(var) {
shiny::sliderInput(
inputId = vars_num[var],
label = vars_num[var],
min = min(.df[, vars_num[var]]),
max = max(.df[, vars_num[var]]),
step = 1,
value = .df[1, vars_num[var]]
)
}
)
)))
}
ui <- shiny::fluidPage(
autoinput_numerical(.df=df),
textOutput(outputId = 'num_values'),
br(),
autoinput_categorical(.df=df),
textOutput(outputId = 'cat_values'),
)
server <- function(input, output) {
output$num_values <- reactive({
vars_num <- names(df)[sapply(df, is.numeric)]
paste0(sapply(vars_num,
FUN=function(i) paste(i,"=", input[[i]])),
collapse = ', ')
})
output$cat_values <- reactive({
vars_cat <- names(df)[sapply(df, is.factor)]
paste0(sapply(vars_cat,
FUN=function(i) paste(i,"=", input[[i]])),
collapse = ', ')
})
}
shiny::shinyApp(ui = ui, server = server)
shiny::shinyApp(ui = ui, server = server)
min(c(1,2,NA))
min(c(1,2,NA), na.rm=TRUE)
#' server <- function(input, output) {
#'   output$values <- reactive({
#'     vars_num <- names(df)[sapply(df, is.numeric)]
#'     paste0(sapply(vars_num,
#'                   FUN=function(i) paste(i,"=", input[[i]])),
#'            collapse = ', ')
#'   })
#' }
#'
#' shiny::shinyApp(ui = ui, server = server)
autoinput_numerical <- function(.df) {
vars_num <- names(.df)[sapply(.df, is.numeric)]
print(vars_num)
shiny::tagList(shiny::fluidRow(
shiny::column(
width = 12,
lapply(
X = 1:length(vars_num),
FUN = function(var) {
shiny::sliderInput(
inputId = vars_num[var],
label = vars_num[var],
min = min(.df[, vars_num[var]], na.rm=TRUE),
max = max(.df[, vars_num[var]], na.rm=TRUE),
step = 1,
value = mean(.df[1, vars_num[var]], na.rm=TRUE)
)
}
)
)))
}
library(shiny)
library(shinymatic)
df <- data.frame(Titanic)
str(df)
ui <- shiny::fluidPage(
autoinput_numerical(.df=df),
textOutput(outputId = 'num_values'),
br(),
autoinput_categorical(.df=df),
textOutput(outputId = 'cat_values'),
)
server <- function(input, output) {
output$num_values <- reactive({
vars_num <- names(df)[sapply(df, is.numeric)]
paste0(sapply(vars_num,
FUN=function(i) paste(i,"=", input[[i]])),
collapse = ', ')
})
output$cat_values <- reactive({
vars_cat <- names(df)[sapply(df, is.factor)]
paste0(sapply(vars_cat,
FUN=function(i) paste(i,"=", input[[i]])),
collapse = ', ')
})
}
shiny::shinyApp(ui = ui, server = server)
#' server <- function(input, output) {
#'   output$values <- reactive({
#'     vars_num <- names(df)[sapply(df, is.numeric)]
#'     paste0(sapply(vars_num,
#'                   FUN=function(i) paste(i,"=", input[[i]])),
#'            collapse = ', ')
#'   })
#' }
#'
#' shiny::shinyApp(ui = ui, server = server)
autoinput_numerical <- function(.df) {
vars_num <- names(.df)[sapply(.df, is.numeric)]
print(vars_num)
shiny::tagList(shiny::fluidRow(
shiny::column(
width = 12,
lapply(
X = 1:length(vars_num),
FUN = function(var) {
shiny::sliderInput(
inputId = vars_num[var],
label = vars_num[var],
min = min(.df[, vars_num[var]], na.rm=TRUE),
max = max(.df[, vars_num[var]], na.rm=TRUE),
step = 1,
value = mean(.df[1, vars_num[var]], na.rm=TRUE)
)
}
)
)))
}
df <- data.frame(Titanic)
str(df)
ui <- shiny::fluidPage(
autoinput_numerical(.df=df),
textOutput(outputId = 'num_values'),
br(),
autoinput_categorical(.df=df),
textOutput(outputId = 'cat_values'),
)
server <- function(input, output) {
output$num_values <- reactive({
vars_num <- names(df)[sapply(df, is.numeric)]
paste0(sapply(vars_num,
FUN=function(i) paste(i,"=", input[[i]])),
collapse = ', ')
})
output$cat_values <- reactive({
vars_cat <- names(df)[sapply(df, is.factor)]
paste0(sapply(vars_cat,
FUN=function(i) paste(i,"=", input[[i]])),
collapse = ', ')
})
}
shiny::shinyApp(ui = ui, server = server)
mean(df$Freq)
#' server <- function(input, output) {
#'   output$values <- reactive({
#'     vars_num <- names(df)[sapply(df, is.numeric)]
#'     paste0(sapply(vars_num,
#'                   FUN=function(i) paste(i,"=", input[[i]])),
#'            collapse = ', ')
#'   })
#' }
#'
#' shiny::shinyApp(ui = ui, server = server)
autoinput_numerical <- function(.df) {
vars_num <- names(.df)[sapply(.df, is.numeric)]
print(vars_num)
shiny::tagList(shiny::fluidRow(
shiny::column(
width = 12,
lapply(
X = 1:length(vars_num),
FUN = function(var) {
shiny::sliderInput(
inputId = vars_num[var],
label = vars_num[var],
min = min(.df[, vars_num[var]], na.rm=TRUE),
max = max(.df[, vars_num[var]], na.rm=TRUE),
step = 1,
value = mean(.df[1, vars_num[var]], na.rm=TRUE)
)
}
)
)))
}
#' server <- function(input, output) {
#'   output$values <- reactive({
#'     vars_cat <- names(df)[sapply(df, is.factor)]
#'     paste0(sapply(vars_cat,
#'                   FUN=function(i) paste(i,"=", input[[i]])),
#'            collapse = ', ')
#'   })
#' }
#'
#' shiny::shinyApp(ui = ui, server = server)
autoinput_categorical <- function(.df) {
vars_cat <- names(.df)[sapply(.df, is.factor)]
shiny::tagList(shiny::fluidRow(shiny::column(
width = 12,
lapply(
X = 1:length(vars_cat),
FUN = function(var) {
shiny::selectInput(
inputId = vars_cat[var],
label = vars_cat[var],
choices = levels(.df[, vars_cat[var]]),
selected = .df[1, vars_cat[var]]
)
}
)
)))
}
df <- data.frame(Titanic)
str(df)
library(shiny)
ui <- shiny::fluidPage(
autoinput_numerical(.df=df),
textOutput(outputId = 'num_values'),
br(),
autoinput_categorical(.df=df),
textOutput(outputId = 'cat_values'),
)
server <- function(input, output) {
output$num_values <- reactive({
vars_num <- names(df)[sapply(df, is.numeric)]
paste0(sapply(vars_num,
FUN=function(i) paste(i,"=", input[[i]])),
collapse = ', ')
})
output$cat_values <- reactive({
vars_cat <- names(df)[sapply(df, is.factor)]
paste0(sapply(vars_cat,
FUN=function(i) paste(i,"=", input[[i]])),
collapse = ', ')
})
}
shiny::shinyApp(ui = ui, server = server)
#' server <- function(input, output) {
#'   output$values <- reactive({
#'     vars_num <- names(df)[sapply(df, is.numeric)]
#'     paste0(sapply(vars_num,
#'                   FUN=function(i) paste(i,"=", input[[i]])),
#'            collapse = ', ')
#'   })
#' }
#'
#' shiny::shinyApp(ui = ui, server = server)
autoinput_numerical <- function(.df) {
vars_num <- names(.df)[sapply(.df, is.numeric)]
print(vars_num)
shiny::tagList(shiny::fluidRow(
shiny::column(
width = 12,
lapply(
X = 1:length(vars_num),
FUN = function(var) {
shiny::sliderInput(
inputId = vars_num[var],
label = vars_num[var],
min = min(.df[, vars_num[var]], na.rm=TRUE),
max = max(.df[, vars_num[var]], na.rm=TRUE),
step = 1,
value = mean(.df[, vars_num[var]], na.rm=TRUE)
)
}
)
)))
}
ui <- shiny::fluidPage(
autoinput_numerical(.df=df),
textOutput(outputId = 'num_values'),
br(),
autoinput_categorical(.df=df),
textOutput(outputId = 'cat_values'),
)
server <- function(input, output) {
output$num_values <- reactive({
vars_num <- names(df)[sapply(df, is.numeric)]
paste0(sapply(vars_num,
FUN=function(i) paste(i,"=", input[[i]])),
collapse = ', ')
})
output$cat_values <- reactive({
vars_cat <- names(df)[sapply(df, is.factor)]
paste0(sapply(vars_cat,
FUN=function(i) paste(i,"=", input[[i]])),
collapse = ', ')
})
}
shiny::shinyApp(ui = ui, server = server)
